name: Deploy to Minikube

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deploy_environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - prod

jobs:
  build-and-deploy:
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: List workspace files
        run: |
          echo "Listing repository content..."
          dir
          echo "Checking for Kubernetes files..."
          dir *.yaml
        shell: cmd
        continue-on-error: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker images locally
        run: |
          echo "Building Docker images locally..."
          
          :: Pull basic images first
          echo "Pulling common images..."
          docker pull nginx:latest
          docker pull mongo:latest
          
          :: Build frontend image
          echo "Building frontend image..."
          docker build -t undergroundehsan/book-management-frontend:latest -f Dockerfile .
          
          :: Build backend image
          echo "Building backend image..."
          docker build -t undergroundehsan/book-management-backend:latest -f backend/Dockerfile ./backend
          
          :: Tag images with localhost registry for local use
          docker tag nginx:latest localhost:5000/nginx:latest
          docker tag mongo:latest localhost:5000/mongo:latest
          docker tag undergroundehsan/book-management-frontend:latest localhost:5000/book-management-frontend:latest
          docker tag undergroundehsan/book-management-backend:latest localhost:5000/book-management-backend:latest
        shell: cmd

      - name: Push Docker images to Docker Hub
        run: |
          echo "Pushing images to Docker Hub..."
          docker push undergroundehsan/book-management-frontend:latest
          docker push undergroundehsan/book-management-backend:latest
        shell: cmd

      - name: Reset and start Minikube with proper DNS
        run: |
          echo "Stopping any running Minikube..."
          minikube stop
          
          echo "Deleting previous Minikube cluster..."
          minikube delete --all --purge
          
          echo "Cleaning Docker containers..."
          docker ps -a | findstr minikube && docker rm -f $(docker ps -a | findstr minikube | awk '{print $1}')
          
          echo "Setting up Minikube with proper configuration..."
          minikube start --memory=2048 --cpus=2 --driver=docker --dns-domain="cluster.local" --insecure-registry="localhost:5000" --addons=registry
          
          echo "Checking Minikube status..."
          minikube status
          
          echo "Verifying DNS configuration..."
          minikube ssh -- cat /etc/resolv.conf
          
          echo "Waiting for Minikube to be ready (30 seconds)..."
          ping -n 30 127.0.0.1 > nul
          
          echo "Updating kubectl context..."
          minikube update-context
          
          echo "Verifying API server accessibility..."
          minikube kubectl -- cluster-info
        shell: cmd
        continue-on-error: true

      - name: Load images into Minikube
        run: |
          echo "Loading images directly into Minikube..."
          
          :: Cache images in Minikube
          echo "Caching nginx image..."
          minikube image load nginx:latest
          
          echo "Caching MongoDB image..."
          minikube image load mongo:latest
          
          echo "Caching frontend image..."
          minikube image load undergroundehsan/book-management-frontend:latest
          
          echo "Caching backend image..."
          minikube image load undergroundehsan/book-management-backend:latest
          
          echo "Verifying cached images in Minikube..."
          minikube image ls
          
          echo "Image loading completed!"
        shell: cmd
        continue-on-error: true

      - name: Deploy test nginx app
        run: |
          echo "Deploying test nginx to verify Minikube functionality..."
          
          :: Create a simple deployment with local image
          echo apiVersion: apps/v1 > simple-deployment.yaml
          echo kind: Deployment >> simple-deployment.yaml
          echo metadata: >> simple-deployment.yaml
          echo   name: test-nginx >> simple-deployment.yaml
          echo spec: >> simple-deployment.yaml
          echo   replicas: 1 >> simple-deployment.yaml
          echo   selector: >> simple-deployment.yaml
          echo     matchLabels: >> simple-deployment.yaml
          echo       app: test-nginx >> simple-deployment.yaml
          echo   template: >> simple-deployment.yaml
          echo     metadata: >> simple-deployment.yaml
          echo       labels: >> simple-deployment.yaml
          echo         app: test-nginx >> simple-deployment.yaml
          echo     spec: >> simple-deployment.yaml
          echo       containers: >> simple-deployment.yaml
          echo       - name: nginx >> simple-deployment.yaml
          echo         image: nginx:latest >> simple-deployment.yaml
          echo         imagePullPolicy: IfNotPresent >> simple-deployment.yaml
          echo         ports: >> simple-deployment.yaml
          echo         - containerPort: 80 >> simple-deployment.yaml
          
          :: Create service for test
          echo apiVersion: v1 > simple-service.yaml
          echo kind: Service >> simple-service.yaml
          echo metadata: >> simple-service.yaml
          echo   name: test-nginx-service >> simple-service.yaml
          echo spec: >> simple-service.yaml
          echo   selector: >> simple-service.yaml
          echo     app: test-nginx >> simple-service.yaml
          echo   ports: >> simple-service.yaml
          echo   - port: 80 >> simple-service.yaml
          echo     targetPort: 80 >> simple-service.yaml
          echo   type: ClusterIP >> simple-service.yaml
          
          :: Apply resources
          echo "Applying test deployment..."
          minikube kubectl -- apply -f simple-deployment.yaml
          minikube kubectl -- apply -f simple-service.yaml
          
          echo "Waiting for test nginx pod to be ready (60 seconds)..."
          ping -n 60 127.0.0.1 > nul
          
          echo "Checking test deployment status..."
          minikube kubectl -- get pods
          
          echo "Test deployment completed!"
        shell: cmd
        continue-on-error: true

      - name: Deploy MongoDB
        run: |
          echo "Deploying MongoDB..."
          
          :: Create MongoDB deployment with local image
          echo apiVersion: apps/v1 > mongodb-deployment.yaml
          echo kind: Deployment >> mongodb-deployment.yaml
          echo metadata: >> mongodb-deployment.yaml
          echo   name: mongodb >> mongodb-deployment.yaml
          echo   labels: >> mongodb-deployment.yaml
          echo     app: book-management >> mongodb-deployment.yaml
          echo     tier: database >> mongodb-deployment.yaml
          echo spec: >> mongodb-deployment.yaml
          echo   replicas: 1 >> mongodb-deployment.yaml
          echo   selector: >> mongodb-deployment.yaml
          echo     matchLabels: >> mongodb-deployment.yaml
          echo       app: book-management >> mongodb-deployment.yaml
          echo       tier: database >> mongodb-deployment.yaml
          echo   template: >> mongodb-deployment.yaml
          echo     metadata: >> mongodb-deployment.yaml
          echo       labels: >> mongodb-deployment.yaml
          echo         app: book-management >> mongodb-deployment.yaml
          echo         tier: database >> mongodb-deployment.yaml
          echo     spec: >> mongodb-deployment.yaml
          echo       containers: >> mongodb-deployment.yaml
          echo       - name: mongodb >> mongodb-deployment.yaml
          echo         image: mongo:latest >> mongodb-deployment.yaml
          echo         imagePullPolicy: IfNotPresent >> mongodb-deployment.yaml
          echo         ports: >> mongodb-deployment.yaml
          echo         - containerPort: 27017 >> mongodb-deployment.yaml
          
          :: Create MongoDB service
          echo apiVersion: v1 > mongodb-service.yaml
          echo kind: Service >> mongodb-service.yaml
          echo metadata: >> mongodb-service.yaml
          echo   name: mongodb-service >> mongodb-service.yaml
          echo spec: >> mongodb-service.yaml
          echo   selector: >> mongodb-service.yaml
          echo     app: book-management >> mongodb-service.yaml
          echo     tier: database >> mongodb-service.yaml
          echo   ports: >> mongodb-service.yaml
          echo   - port: 27017 >> mongodb-service.yaml
          echo     targetPort: 27017 >> mongodb-service.yaml
          echo   type: ClusterIP >> mongodb-service.yaml
          
          :: Apply MongoDB resources
          echo "Applying MongoDB deployment and service..."
          minikube kubectl -- apply -f mongodb-deployment.yaml
          minikube kubectl -- apply -f mongodb-service.yaml
          
          echo "Waiting for MongoDB to be ready (60 seconds)..."
          ping -n 60 127.0.0.1 > nul
          
          echo "Checking MongoDB status..."
          minikube kubectl -- get pods -l tier=database
          
          echo "MongoDB deployment completed!"
        shell: cmd
        continue-on-error: true

      - name: Deploy backend
        run: |
          echo "Deploying backend..."
          
          :: Create backend deployment with local image
          echo apiVersion: apps/v1 > backend-deployment.yaml
          echo kind: Deployment >> backend-deployment.yaml
          echo metadata: >> backend-deployment.yaml
          echo   name: backend >> backend-deployment.yaml
          echo   labels: >> backend-deployment.yaml
          echo     app: book-management >> backend-deployment.yaml
          echo     tier: backend >> backend-deployment.yaml
          echo spec: >> backend-deployment.yaml
          echo   replicas: 1 >> backend-deployment.yaml
          echo   selector: >> backend-deployment.yaml
          echo     matchLabels: >> backend-deployment.yaml
          echo       app: book-management >> backend-deployment.yaml
          echo       tier: backend >> backend-deployment.yaml
          echo   template: >> backend-deployment.yaml
          echo     metadata: >> backend-deployment.yaml
          echo       labels: >> backend-deployment.yaml
          echo         app: book-management >> backend-deployment.yaml
          echo         tier: backend >> backend-deployment.yaml
          echo     spec: >> backend-deployment.yaml
          echo       containers: >> backend-deployment.yaml
          echo       - name: backend >> backend-deployment.yaml
          echo         image: undergroundehsan/book-management-backend:latest >> backend-deployment.yaml
          echo         imagePullPolicy: IfNotPresent >> backend-deployment.yaml
          echo         ports: >> backend-deployment.yaml
          echo         - containerPort: 5000 >> backend-deployment.yaml
          echo         env: >> backend-deployment.yaml
          echo         - name: MONGODB_URI >> backend-deployment.yaml
          echo           value: "mongodb://mongodb-service:27017/bookmanagement" >> backend-deployment.yaml
          
          :: Create backend service
          echo apiVersion: v1 > backend-service.yaml
          echo kind: Service >> backend-service.yaml
          echo metadata: >> backend-service.yaml
          echo   name: backend-service >> backend-service.yaml
          echo spec: >> backend-service.yaml
          echo   selector: >> backend-service.yaml
          echo     app: book-management >> backend-service.yaml
          echo     tier: backend >> backend-service.yaml
          echo   ports: >> backend-service.yaml
          echo   - port: 5000 >> backend-service.yaml
          echo     targetPort: 5000 >> backend-service.yaml
          echo   type: ClusterIP >> backend-service.yaml
          
          :: Apply backend resources
          echo "Applying backend deployment and service..."
          minikube kubectl -- apply -f backend-deployment.yaml
          minikube kubectl -- apply -f backend-service.yaml
          
          echo "Waiting for backend to be ready (60 seconds)..."
          ping -n 60 127.0.0.1 > nul
          
          echo "Checking backend status..."
          minikube kubectl -- get pods -l tier=backend
          
          echo "Backend deployment completed!"
        shell: cmd
        continue-on-error: true

      - name: Deploy frontend
        run: |
          echo "Deploying frontend..."
          
          :: Create frontend deployment with local image
          echo apiVersion: apps/v1 > frontend-deployment.yaml
          echo kind: Deployment >> frontend-deployment.yaml
          echo metadata: >> frontend-deployment.yaml
          echo   name: frontend >> frontend-deployment.yaml
          echo   labels: >> frontend-deployment.yaml
          echo     app: book-management >> frontend-deployment.yaml
          echo     tier: frontend >> frontend-deployment.yaml
          echo spec: >> frontend-deployment.yaml
          echo   replicas: 1 >> frontend-deployment.yaml
          echo   selector: >> frontend-deployment.yaml
          echo     matchLabels: >> frontend-deployment.yaml
          echo       app: book-management >> frontend-deployment.yaml
          echo       tier: frontend >> frontend-deployment.yaml
          echo   template: >> frontend-deployment.yaml
          echo     metadata: >> frontend-deployment.yaml
          echo       labels: >> frontend-deployment.yaml
          echo         app: book-management >> frontend-deployment.yaml
          echo         tier: frontend >> frontend-deployment.yaml
          echo     spec: >> frontend-deployment.yaml
          echo       containers: >> frontend-deployment.yaml
          echo       - name: frontend >> frontend-deployment.yaml
          echo         image: undergroundehsan/book-management-frontend:latest >> frontend-deployment.yaml
          echo         imagePullPolicy: IfNotPresent >> frontend-deployment.yaml
          echo         ports: >> frontend-deployment.yaml
          echo         - containerPort: 3000 >> frontend-deployment.yaml
          echo         env: >> frontend-deployment.yaml
          echo         - name: NEXT_PUBLIC_API_URL >> frontend-deployment.yaml
          echo           value: "http://backend-service:5000/api" >> frontend-deployment.yaml
          
          :: Create frontend service
          echo apiVersion: v1 > frontend-service.yaml
          echo kind: Service >> frontend-service.yaml
          echo metadata: >> frontend-service.yaml
          echo   name: frontend-service >> frontend-service.yaml
          echo spec: >> frontend-service.yaml
          echo   selector: >> frontend-service.yaml
          echo     app: book-management >> frontend-service.yaml
          echo     tier: frontend >> frontend-service.yaml
          echo   ports: >> frontend-service.yaml
          echo   - port: 3000 >> frontend-service.yaml
          echo     targetPort: 3000 >> frontend-service.yaml
          echo   type: NodePort >> frontend-service.yaml
          
          :: Apply frontend resources
          echo "Applying frontend deployment and service..."
          minikube kubectl -- apply -f frontend-deployment.yaml
          minikube kubectl -- apply -f frontend-service.yaml
          
          echo "Waiting for frontend to be ready (60 seconds)..."
          ping -n 60 127.0.0.1 > nul
          
          echo "Checking frontend status..."
          minikube kubectl -- get pods -l tier=frontend
          
          echo "Frontend deployment completed!"
        shell: cmd
        continue-on-error: true

      - name: Verify final deployment
        run: |
          echo "Verifying Book Management System deployment..."
          minikube kubectl -- get all
          
          echo "Waiting for all pods to be ready (120 seconds)..."
          ping -n 120 127.0.0.1 > nul
          
          echo "Checking all pod statuses..."
          minikube kubectl -- get pods
          
          echo "Checking pod details..."
          minikube kubectl -- describe pods
          
          echo "Attempt to access frontend service..."
          minikube service list
          minikube service frontend-service --url
          
          echo "Deployment verification completed!"
        shell: cmd
        continue-on-error: true

      - name: Debug pod status
        if: ${{ always() }}
        run: |
          echo "Running diagnostics on Minikube..."
          
          echo "Checking Docker images:"
          docker images
          
          echo "Minikube node status:"
          minikube node list
          
          echo "Checking resources in Minikube node:"
          minikube ssh -- "df -h && free -m && top -bn1 | head -15"
          
          echo "Checking Kubernetes events:"
          minikube kubectl -- get events --sort-by=.metadata.creationTimestamp
          
          echo "Debugging completed!"
        shell: cmd
        continue-on-error: true 
