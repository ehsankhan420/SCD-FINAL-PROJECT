name: Deploy to Minikube

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deploy_environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - prod

jobs:
  build-and-deploy:
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: List workspace files
        run: |
          echo "Listing repository content..."
          dir
          echo "Checking for Kubernetes files..."
          dir *.yaml
        shell: cmd
        continue-on-error: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker images
        run: |
          echo "Building and pushing Docker images..."
          
          :: Build frontend image
          echo "Building frontend image..."
          docker build -t undergroundehsan/book-management-frontend:latest -f Dockerfile .
          
          :: Build backend image
          echo "Building backend image..."
          docker build -t undergroundehsan/book-management-backend:latest -f backend/Dockerfile ./backend
          
          :: Push images to Docker Hub
          echo "Pushing images to Docker Hub..."
          docker push undergroundehsan/book-management-frontend:latest
          docker push undergroundehsan/book-management-backend:latest
        shell: cmd

      - name: Reset and configure Minikube
        run: |
          echo "Stopping and resetting Minikube..."
          minikube stop
          minikube delete
          
          echo "Starting Minikube with more resources..."
          minikube start --memory=4096 --cpus=2 --disk-size=20g
          
          echo "Checking Minikube status..."
          minikube status
          
          echo "Adding Docker images to Minikube..."
          minikube image load undergroundehsan/book-management-frontend:latest
          minikube image load undergroundehsan/book-management-backend:latest
        shell: cmd
        continue-on-error: true

      - name: Create K8s config files if missing
        run: |
          :: Check if deployment.yaml exists
          if not exist deployment.yaml (
            echo Creating deployment.yaml...
            echo apiVersion: apps/v1 > deployment.yaml
            echo kind: Deployment >> deployment.yaml
            echo metadata: >> deployment.yaml
            echo   name: frontend >> deployment.yaml
            echo spec: >> deployment.yaml
            echo   replicas: 1 >> deployment.yaml
            echo   selector: >> deployment.yaml
            echo     matchLabels: >> deployment.yaml
            echo       app: book-management >> deployment.yaml
            echo   template: >> deployment.yaml
            echo     metadata: >> deployment.yaml
            echo       labels: >> deployment.yaml
            echo         app: book-management >> deployment.yaml
            echo     spec: >> deployment.yaml
            echo       containers: >> deployment.yaml
            echo       - name: frontend >> deployment.yaml
            echo         image: undergroundehsan/book-management-frontend:latest >> deployment.yaml
            echo         ports: >> deployment.yaml
            echo         - containerPort: 3000 >> deployment.yaml
          )

          :: Check if configmap.yaml exists
          if not exist configmap.yaml (
            echo Creating configmap.yaml...
            echo apiVersion: v1 > configmap.yaml
            echo kind: ConfigMap >> configmap.yaml
            echo metadata: >> configmap.yaml
            echo   name: app-config >> configmap.yaml
            echo data: >> configmap.yaml
            echo   API_URL: "http://backend-service:5000/api" >> configmap.yaml
          )

          :: Check if secrets.yaml exists
          if not exist secrets.yaml (
            echo Creating secrets.yaml...
            echo apiVersion: v1 > secrets.yaml
            echo kind: Secret >> secrets.yaml
            echo metadata: >> secrets.yaml
            echo   name: app-secrets >> secrets.yaml
            echo type: Opaque >> secrets.yaml
            echo data: >> secrets.yaml
            echo   JWT_TOKEN: "c2VjcmV0" >> secrets.yaml
          )

          :: Check if pvc.yaml exists
          if not exist pvc.yaml (
            echo Creating pvc.yaml...
            echo apiVersion: v1 > pvc.yaml
            echo kind: PersistentVolumeClaim >> pvc.yaml
            echo metadata: >> pvc.yaml
            echo   name: app-data-pvc >> pvc.yaml
            echo spec: >> pvc.yaml
            echo   accessModes: >> pvc.yaml
            echo   - ReadWriteOnce >> pvc.yaml
            echo   resources: >> pvc.yaml
            echo     requests: >> pvc.yaml
            echo       storage: 1Gi >> pvc.yaml
          )

          :: Check if service.yaml exists
          if not exist service.yaml (
            echo Creating service.yaml...
            echo apiVersion: v1 > service.yaml
            echo kind: Service >> service.yaml
            echo metadata: >> service.yaml
            echo   name: frontend-service >> service.yaml
            echo spec: >> service.yaml
            echo   selector: >> service.yaml
            echo     app: book-management >> service.yaml
            echo   ports: >> service.yaml
            echo   - port: 3000 >> service.yaml
            echo     targetPort: 3000 >> service.yaml
            echo   type: ClusterIP >> service.yaml
          )
        shell: cmd

      - name: Deploy to Minikube
        run: |
          echo "Deploying to Minikube..."
          
          :: Use simpler deployment for testing
          echo Creating simple frontend deployment...
          kubectl create deployment frontend --image=undergroundehsan/book-management-frontend:latest --replicas=1
          
          echo Creating simple backend deployment...
          kubectl create deployment backend --image=undergroundehsan/book-management-backend:latest --replicas=1
          
          echo Exposing services...
          kubectl expose deployment frontend --port=3000 --target-port=3000 --name=frontend-service
          kubectl expose deployment backend --port=5000 --target-port=5000 --name=backend-service
          
          echo Checking deployment status...
          kubectl get deployments
          kubectl get services
          
          echo "Deployment completed!"
        shell: cmd
        continue-on-error: true

      - name: Verify deployment
        run: |
          echo "Verifying deployment..."
          kubectl get all
          
          echo "Getting Pod details..."
          kubectl get pods
          
          echo "Waiting for Pods to become ready..."
          timeout /t 30
          
          echo "Checking Pod status again..."
          kubectl get pods
          
          echo "Attempting to port forward..."
          start /b kubectl port-forward service/frontend-service 3000:3000
          
          echo "Deployment verification completed!"
        shell: cmd
        continue-on-error: true
